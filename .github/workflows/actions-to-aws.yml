#------------------------------------------------------------------
# Запуск двух инстансов AWS EC2 по шаблону
# Запуск ALB и настройка работы инстансов через ALB
# Первый работающий вариант ---- initial
#------------------------------------------------------------------

name: 2_EC2_ALB_Launch
env:
  TEMPLATE_ID      : "lt-04b30e2dc9209f94b"
  TEMPLATE_VERSION : "1"
  SUBNET1          : "subnet-b47000de"
  SUBNET2          : "subnet-6a862916"
  SECURITY_GROUP   : "sg-0be89dd414f0479d5"
  ALB_NAME         : "test-ALB"
  TARGET_GRP_NAME  : "test-target-group" 
  
# Запускаем по событию. 
on:
  # Ручками в Actions вкладке
  workflow_dispatch:
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  # Задача: Запуск серверов
  AWS-EC2-launch:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Используем настроенную среду
    environment:
      name: My_AWS
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Аутентификация
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id      : ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key  : ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region             : "eu-central-1"
          
      # Запуск и получение id первого EC2 сервера
      - name: Launch instance 1
        run: |
          aws ec2 run-instances --launch-template LaunchTemplateId=${{ env.TEMPLATE_ID }},Version=${{ env.TEMPLATE_VERSION }} --user-data file://script1.txt > instance1.json
          echo 'INSTANCE_ID1<<EOF' >> $GITHUB_ENV
          cat instance1.json | grep "\"i-" | awk {'print $2'} |tr -d , |tr -d \" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          
      # Запуск и получение id второго EC2 сервера
      - name: Launch instance 2
        run: |
          aws ec2 run-instances --launch-template LaunchTemplateId=${{ env.TEMPLATE_ID }},Version=${{ env.TEMPLATE_VERSION }} --user-data file://script2.txt> instance2.json
          echo 'INSTANCE_ID2<<EOF' >> $GITHUB_ENV
          cat instance2.json | grep "\"i-" | awk {'print $2'} |tr -d , |tr -d \" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          
      # Ждём, пока поднимутся сервера
      - name: Sleep for 60 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '60s'

      # Запуск ALB и получение arn
      - name: Start ALB
        run: |
          aws elbv2 create-load-balancer --name ${{ env.ALB_NAME }} --subnets ${{ env.SUBNET1 }} ${{ env.SUBNET2 }} --security-groups ${{ env.SECURITY_GROUP }} > alb1.json
          echo 'ALB_ARN<<EOF' >> $GITHUB_ENV
          cat alb1.json | grep "\"arn:" | awk {'print $2'} |tr -d , |tr -d \" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo 'VPC_ID<<EOF' >> $GITHUB_ENV
          cat alb1.json | grep "\"vpc-" | awk {'print $2'} |tr -d , |tr -d \" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          
      - name: Creating target group
        run: |
          aws elbv2 create-target-group --name ${{ env.TARGET_GRP_NAME }} --protocol HTTP --port 80 --vpc-id ${{ env.VPC_ID }} > vpc1.json
          echo 'TARGET_GRP_ARN<<EOF' >> $GITHUB_ENV
          cat vpc1.json | grep "\"arn:" | awk {'print $2'} |tr -d , |tr -d \" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          
      - name: Creating listener
        run: |
          aws elbv2 register-targets --target-group-arn ${{ env.TARGET_GRP_ARN }} --targets Id=${{ env.INSTANCE_ID1 }} Id=${{ env.INSTANCE_ID2 }}
          aws elbv2 create-listener --load-balancer-arn ${{ env.ALB_ARN }} --protocol HTTP --port 80 --default-actions Type=forward,TargetGroupArn=${{ env.TARGET_GRP_ARN }}
          
    
#EOF    
#""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
